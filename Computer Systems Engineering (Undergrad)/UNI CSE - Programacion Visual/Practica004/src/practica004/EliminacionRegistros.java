/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package practica004;

import java.awt.List;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Reiso
 */
public class EliminacionRegistros extends javax.swing.JDialog {

    /**
     * Creates new form EliminacionRegistros
     */
    public EliminacionRegistros(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 255, 255));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Matricula", "Nombre", "Edad", "Sexo", "Estado Civil"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Eliminar");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton1MousePressed(evt);
            }
        });

        jButton2.setText("Salir");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton2MousePressed(evt);
            }
        });

        jLabel1.setText("Ingrese Matricula para Eliminar Datos");

        jButton3.setText("Mostrar");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton3MousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addGap(257, 257, 257)
                        .addComponent(jButton2))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 839, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(10, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MousePressed
        // TODO add your handling code here:
        String matriculaBuscada = jTextField1.getText(); // Obtén la matrícula desde el jTextField1

        // Llama a la función para cargar los datos de la matrícula buscada
        cargarDatosDesdeArchivoTabla("archivo.txt", jTable1, matriculaBuscada);
    }//GEN-LAST:event_jButton3MousePressed

    private void jButton2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MousePressed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButton2MousePressed

    private void jButton1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MousePressed
        // TODO add your handling code here:
        String matriculaBuscada = jTextField1.getText(); // Obtén la matrícula desde el jTextField1

        // Llama a la función para eliminar los datos de la matrícula buscada
        eliminarDatosYActualizarArchivo("archivo.txt", jTable1, matriculaBuscada);
    }//GEN-LAST:event_jButton1MousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EliminacionRegistros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EliminacionRegistros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EliminacionRegistros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EliminacionRegistros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                EliminacionRegistros dialog = new EliminacionRegistros(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
private static void cargarDatosDesdeArchivoTabla(String archivo, JTable table, String matriculaBuscada) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0);

        try (BufferedReader br = new BufferedReader(new FileReader(archivo))) {
            String matricula = null;
            String nombre = null;
            String edad = null;
            String sexo = null;
            String estadoCivil = null;

            String linea;
            while ((linea = br.readLine()) != null) {
                if (linea.startsWith("Matrícula:")) {
                    matricula = linea.substring("Matrícula:".length()).trim();
                } else if (linea.startsWith("Nombre:")) {
                    nombre = linea.substring("Nombre:".length()).trim();
                } else if (linea.startsWith("Edad:")) {
                    edad = linea.substring("Edad:".length()).trim();
                } else if (linea.startsWith("Sexo:")) {
                    sexo = linea.substring("Sexo:".length()).trim();
                } else if (linea.startsWith("Estado Civil:")) {
                    estadoCivil = linea.substring("Estado Civil:".length()).trim();
                }

                // Si se han obtenido todos los valores y la matrícula coincide con la buscada, agregar fila al modelo de la tabla
                if (matricula != null && nombre != null && edad != null && sexo != null && estadoCivil != null) {
                    if (matricula.equals(matriculaBuscada)) {
                        model.addRow(new Object[]{matricula, nombre, edad, sexo, estadoCivil});
                    }
                    // Reiniciar los valores para la próxima fila
                    matricula = null;
                    nombre = null;
                    edad = null;
                    sexo = null;
                    estadoCivil = null;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void eliminarDatosYActualizarArchivo(String archivo, JTable table, String matriculaBuscada) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();

        try (BufferedReader br = new BufferedReader(new FileReader(archivo))) {
            String matricula = null;
            String nombre = null;
            String edad = null;
            String sexo = null;
            String estadoCivil = null;

            ArrayList<String> lines;
            lines = new ArrayList<String>();

            String linea;
            while ((linea = br.readLine()) != null) {
                if (linea.startsWith("Matrícula:")) {
                    matricula = linea.substring("Matrícula:".length()).trim();
                } else if (linea.startsWith("Nombre:")) {
                    nombre = linea.substring("Nombre:".length()).trim();
                } else if (linea.startsWith("Edad:")) {
                    edad = linea.substring("Edad:".length()).trim();
                } else if (linea.startsWith("Sexo:")) {
                    sexo = linea.substring("Sexo:".length()).trim();
                } else if (linea.startsWith("Estado Civil:")) {
                    estadoCivil = linea.substring("Estado Civil:".length()).trim();
                }

                // Si se han obtenido todos los valores y la matrícula coincide con la buscada, no agregar esta fila al archivo y al modelo de la tabla
                if (matricula != null && nombre != null && edad != null && sexo != null && estadoCivil != null) {
                    if (!matricula.equals(matriculaBuscada)) {
                        lines.add("Matrícula: " + matricula);
                        lines.add("Nombre: " + nombre);
                        lines.add("Edad: " + edad);
                        lines.add("Sexo: " + sexo);
                        lines.add("Estado Civil: " + estadoCivil);
                    }
                    // Reiniciar los valores para la próxima fila
                    matricula = null;
                    nombre = null;
                    edad = null;
                    sexo = null;
                    estadoCivil = null;
                }
            }

            // Actualizar el archivo con las líneas sin la matrícula eliminada
            try (BufferedWriter bw = new BufferedWriter(new FileWriter(archivo))) {
                for (String line : lines) {
                    bw.write(line);
                    bw.newLine();
                }
            }

            // Eliminar la fila correspondiente en el modelo de la tabla
            for (int i = 0; i < model.getRowCount(); i++) {
                String matriculaEnTabla = (String) model.getValueAt(i, 0);
                if (matriculaEnTabla.equals(matriculaBuscada)) {
                    model.removeRow(i);
                    break; // Salir del bucle una vez que se haya eliminado la fila
                }
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
